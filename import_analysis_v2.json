{
  "summary": {
    "total_files": 117,
    "entry_points": 7,
    "executables": 43,
    "libraries": 35,
    "leaf_libraries": 13,
    "unused": 17
  },
  "categories": {
    "entry_points": [
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_normalizer.py"
    ],
    "executables": [
      "scripts\\backfill_condition_categories.py",
      "scripts\\classify_conditions.py",
      "scripts\\migrate_add_mechanism.py",
      "scripts\\migrate_intervention_category_nullable.py",
      "src\\data_mining\\correlation_consistency_checker.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\review_correlations.py",
      "src\\experimentation\\analysis\\results_analyzer.py",
      "src\\experimentation\\group_categorization\\experiment_runner.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\export_to_json.py",
      "src\\migrations\\add_semantic_normalization_tables.py",
      "src\\migrations\\create_interventions_view_option_b.py",
      "src\\semantic_normalization\\cluster_reviewer.py",
      "src\\semantic_normalization\\embedding_engine.py",
      "src\\semantic_normalization\\evaluator.py",
      "src\\semantic_normalization\\experiment_logger.py",
      "src\\semantic_normalization\\hierarchy_manager.py",
      "src\\semantic_normalization\\llm_classifier.py",
      "src\\semantic_normalization\\normalizer.py",
      "src\\semantic_normalization\\test_runner.py",
      "src\\semantic_normalization\\ground_truth\\data_exporter.py",
      "src\\semantic_normalization\\ground_truth\\evaluator.py",
      "src\\semantic_normalization\\ground_truth\\generate_candidates.py",
      "src\\semantic_normalization\\ground_truth\\labeling_interface.py",
      "src\\semantic_normalization\\ground_truth\\label_in_batches.py",
      "src\\semantic_normalization\\ground_truth\\pair_generator.py",
      "src\\semantic_normalization\\ground_truth\\remove_duplicate_labels.py",
      "src\\utils\\analyze_mapping_suggestions.py",
      "src\\utils\\analyze_reviews.py",
      "src\\utils\\batch_process_summary.py",
      "src\\utils\\batch_process_unmapped_terms.py",
      "src\\utils\\cleanup_old_interventions.py",
      "src\\utils\\create_manual_mappings.py",
      "src\\utils\\drop_legacy_tables.py",
      "src\\utils\\export_frontend_data.py",
      "src\\utils\\reextract_mechanisms.py",
      "src\\utils\\review_correlations.py",
      "src\\utils\\run_correlation_extraction.py"
    ],
    "libraries": [
      "src\\conditions\\category_validators.py",
      "src\\data\\api_clients.py",
      "src\\data\\error_handler.py",
      "src\\data\\repositories.py",
      "src\\data\\utils.py",
      "src\\data\\validators.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\correlation_consistency_checker.py",
      "src\\data_mining\\intervention_consensus_analyzer.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\search_terms.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_session_manager.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\review_correlations.py"
    ],
    "unused": [
      "src\\conditions\\search_terms.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\data_mining\\fundamental_functions.py",
      "src\\data_mining\\graph_utils.py",
      "src\\data_mining\\medical_knowledge.py",
      "src\\data_mining\\scoring_utils.py",
      "src\\data_mining\\similarity_utils.py",
      "src\\experimentation\\analyze_interventions.py",
      "src\\experimentation\\check_progress.py",
      "src\\experimentation\\show_interventions.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\entity_utils.py",
      "src\\semantic_normalization\\prompts.py",
      "src\\semantic_normalization\\semantic_normalizer.py",
      "src\\semantic_normalization\\ground_truth\\prompts.py",
      "src\\utils\\imports.py",
      "src\\utils\\integration_success_summary.py"
    ],
    "leaf_libraries": [
      "src\\conditions\\taxonomy.py",
      "src\\data\\config.py",
      "src\\data_mining\\biological_patterns.py",
      "src\\data_mining\\condition_similarity_mapping.py",
      "src\\data_mining\\failed_interventions.py",
      "src\\data_mining\\innovation_tracking_system.py",
      "src\\data_mining\\power_combinations.py",
      "src\\experimentation\\config\\experiment_config.py",
      "src\\experimentation\\evaluation\\system_monitor.py",
      "src\\interventions\\taxonomy.py",
      "src\\semantic_normalization\\config.py",
      "src\\semantic_normalization\\__init__.py",
      "src\\semantic_normalization\\ground_truth\\generate_candidates.py"
    ]
  },
  "imports_graph": {
    "scripts\\backfill_condition_categories.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\conditions\\taxonomy.py",
      "src\\conditions\\taxonomy.py"
    ],
    "scripts\\migrate_add_mechanism.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\conditions\\category_validators.py": [
      "src\\conditions\\taxonomy.py",
      "src\\conditions\\taxonomy.py"
    ],
    "src\\conditions\\search_terms.py": [
      "src\\conditions\\taxonomy.py",
      "src\\conditions\\taxonomy.py"
    ],
    "src\\data\\api_clients.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\error_handler.py",
      "src\\data\\error_handler.py"
    ],
    "src\\data\\error_handler.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data\\repositories.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\data\\utils.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data\\validators.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data_collection\\database_manager.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\validators.py",
      "src\\data\\validators.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\category_validators.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\batch_file_operations.py"
    ],
    "src\\data_collection\\data_mining_repository.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\data_collection\\fulltext_retriever.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py"
    ],
    "src\\data_collection\\paper_parser.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\data\\validators.py",
      "src\\data\\validators.py"
    ],
    "src\\data_collection\\pubmed_collector.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\interventions\\search_terms.py",
      "src\\interventions\\search_terms.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_collection\\semantic_scholar_enrichment.py"
    ],
    "src\\data_collection\\semantic_scholar_enrichment.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\data_mining\\bayesian_scorer.py": [
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data_mining\\correlation_consistency_checker.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\data_mining\\data_mining_orchestrator.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\innovation_tracking_system.py",
      "src\\data_mining\\innovation_tracking_system.py",
      "src\\data_mining\\biological_patterns.py",
      "src\\data_mining\\biological_patterns.py",
      "src\\data_mining\\condition_similarity_mapping.py",
      "src\\data_mining\\condition_similarity_mapping.py",
      "src\\data_mining\\power_combinations.py",
      "src\\data_mining\\power_combinations.py",
      "src\\data_mining\\failed_interventions.py",
      "src\\data_mining\\failed_interventions.py",
      "src\\data_mining\\correlation_consistency_checker.py",
      "src\\data_mining\\correlation_consistency_checker.py"
    ],
    "src\\data_mining\\emerging_category_analyzer.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py",
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py"
    ],
    "src\\data_mining\\intervention_consensus_analyzer.py": [
      "src\\data_mining\\intervention_consensus_analyzer.py",
      "src\\data_mining\\intervention_consensus_analyzer.py"
    ],
    "src\\data_mining\\medical_knowledge_graph.py": [
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data_mining\\research_gaps.py": [
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\data_mining\\review_correlations.py": [
      "src\\utils\\review_correlations.py",
      "src\\utils\\review_correlations.py"
    ],
    "src\\data_mining\\treatment_recommendation_engine.py": [
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\experimentation\\group_categorization\\condition_group_categorizer.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\experimentation\\group_categorization\\experiment_runner.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\experimentation\\group_categorization\\group_categorizer.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\experimentation\\group_categorization\\validation.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\experimentation\\runners\\dataset_selector.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\experimentation\\runners\\experiment_runner.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\experimentation\\config\\experiment_config.py",
      "src\\experimentation\\config\\experiment_config.py",
      "src\\experimentation\\evaluation\\system_monitor.py",
      "src\\experimentation\\evaluation\\system_monitor.py",
      "src\\experimentation\\config\\experiment_config.py",
      "src\\experimentation\\config\\experiment_config.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\experimentation\\runners\\dataset_selector.py"
    ],
    "src\\interventions\\category_validators.py": [
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py",
      "src\\data\\validators.py",
      "src\\data\\validators.py",
      "src\\conditions\\category_validators.py",
      "src\\conditions\\category_validators.py"
    ],
    "src\\interventions\\search_terms.py": [
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py"
    ],
    "src\\llm_processing\\batch_entity_processor.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\llm_processing\\entity_operations.py": [
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\prompt_service.py"
    ],
    "src\\llm_processing\\export_to_json.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\llm_processing\\prompt_service.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py"
    ],
    "src\\llm_processing\\single_model_analyzer.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\data\\error_handler.py",
      "src\\data\\error_handler.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\prompt_service.py"
    ],
    "src\\migrations\\add_semantic_normalization_tables.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\migrations\\create_interventions_view_option_b.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\orchestration\\batch_medical_rotation.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py"
    ],
    "src\\orchestration\\rotation_group_categorization.py": [
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
      "src\\experimentation\\group_categorization\\condition_group_categorizer.py"
    ],
    "src\\orchestration\\rotation_llm_categorization.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\interventions\\taxonomy.py",
      "src\\interventions\\taxonomy.py",
      "src\\conditions\\taxonomy.py",
      "src\\conditions\\taxonomy.py"
    ],
    "src\\orchestration\\rotation_llm_processor.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py"
    ],
    "src\\orchestration\\rotation_paper_collector.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\orchestration\\rotation_session_manager.py",
      "src\\orchestration\\rotation_session_manager.py"
    ],
    "src\\orchestration\\rotation_semantic_grouping_integrator.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\orchestration\\rotation_semantic_normalizer.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\semantic_normalization\\__init__.py",
      "src\\semantic_normalization\\__init__.py",
      "src\\semantic_normalization\\config.py",
      "src\\semantic_normalization\\config.py"
    ],
    "src\\orchestration\\rotation_session_manager.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\semantic_normalization\\ground_truth\\__init__.py": [
      "src\\semantic_normalization\\ground_truth\\generate_candidates.py",
      "src\\semantic_normalization\\ground_truth\\generate_candidates.py"
    ],
    "src\\utils\\analyze_reviews.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\utils\\batch_file_operations.py": [
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\utils\\batch_process_summary.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\utils\\reextract_mechanisms.py": [
      "src\\data\\config.py",
      "src\\data\\config.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py"
    ],
    "src\\utils\\review_correlations.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ],
    "src\\utils\\run_correlation_extraction.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data\\config.py",
      "src\\data\\config.py"
    ]
  },
  "imported_by_graph": {
    "src\\data_collection\\database_manager.py": [
      "scripts\\backfill_condition_categories.py",
      "scripts\\backfill_condition_categories.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_mining\\correlation_consistency_checker.py",
      "src\\data_mining\\correlation_consistency_checker.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\export_to_json.py",
      "src\\llm_processing\\export_to_json.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\utils\\batch_process_summary.py",
      "src\\utils\\batch_process_summary.py",
      "src\\utils\\review_correlations.py",
      "src\\utils\\review_correlations.py",
      "src\\utils\\run_correlation_extraction.py",
      "src\\utils\\run_correlation_extraction.py"
    ],
    "src\\conditions\\taxonomy.py": [
      "scripts\\backfill_condition_categories.py",
      "scripts\\backfill_condition_categories.py",
      "src\\conditions\\category_validators.py",
      "src\\conditions\\category_validators.py",
      "src\\conditions\\search_terms.py",
      "src\\conditions\\search_terms.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py"
    ],
    "src\\data\\config.py": [
      "scripts\\migrate_add_mechanism.py",
      "scripts\\migrate_add_mechanism.py",
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\data\\error_handler.py",
      "src\\data\\error_handler.py",
      "src\\data\\repositories.py",
      "src\\data\\repositories.py",
      "src\\data\\utils.py",
      "src\\data\\utils.py",
      "src\\data\\validators.py",
      "src\\data\\validators.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\data_mining_repository.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
      "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
      "src\\experimentation\\group_categorization\\experiment_runner.py",
      "src\\experimentation\\group_categorization\\experiment_runner.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\group_categorizer.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\group_categorization\\validation.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\experimentation\\runners\\dataset_selector.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\batch_entity_processor.py",
      "src\\llm_processing\\export_to_json.py",
      "src\\llm_processing\\export_to_json.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\migrations\\add_semantic_normalization_tables.py",
      "src\\migrations\\add_semantic_normalization_tables.py",
      "src\\migrations\\create_interventions_view_option_b.py",
      "src\\migrations\\create_interventions_view_option_b.py",
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_normalizer.py",
      "src\\orchestration\\rotation_semantic_normalizer.py",
      "src\\orchestration\\rotation_session_manager.py",
      "src\\orchestration\\rotation_session_manager.py",
      "src\\utils\\analyze_reviews.py",
      "src\\utils\\analyze_reviews.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\batch_file_operations.py",
      "src\\utils\\reextract_mechanisms.py",
      "src\\utils\\reextract_mechanisms.py",
      "src\\utils\\review_correlations.py",
      "src\\utils\\review_correlations.py",
      "src\\utils\\run_correlation_extraction.py",
      "src\\utils\\run_correlation_extraction.py"
    ],
    "src\\data\\error_handler.py": [
      "src\\data\\api_clients.py",
      "src\\data\\api_clients.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py"
    ],
    "src\\data\\validators.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\paper_parser.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\category_validators.py"
    ],
    "src\\interventions\\category_validators.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py"
    ],
    "src\\utils\\batch_file_operations.py": [
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py",
      "src\\data_collection\\database_manager.py"
    ],
    "src\\data\\api_clients.py": [
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\data_collection\\semantic_scholar_enrichment.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\utils\\reextract_mechanisms.py",
      "src\\utils\\reextract_mechanisms.py"
    ],
    "src\\data\\utils.py": [
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\fulltext_retriever.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\paper_parser.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\utils\\reextract_mechanisms.py",
      "src\\utils\\reextract_mechanisms.py"
    ],
    "src\\data_collection\\paper_parser.py": [
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py"
    ],
    "src\\data_collection\\fulltext_retriever.py": [
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py"
    ],
    "src\\interventions\\search_terms.py": [
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py"
    ],
    "src\\data_collection\\semantic_scholar_enrichment.py": [
      "src\\data_collection\\pubmed_collector.py",
      "src\\data_collection\\pubmed_collector.py"
    ],
    "src\\data_collection\\data_mining_repository.py": [
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\bayesian_scorer.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\medical_knowledge_graph.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\research_gaps.py",
      "src\\data_mining\\treatment_recommendation_engine.py",
      "src\\data_mining\\treatment_recommendation_engine.py"
    ],
    "src\\data\\repositories.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_llm_processor.py"
    ],
    "src\\data_mining\\bayesian_scorer.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\medical_knowledge_graph.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\treatment_recommendation_engine.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\research_gaps.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\innovation_tracking_system.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\biological_patterns.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\condition_similarity_mapping.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\power_combinations.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\failed_interventions.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\data_mining\\correlation_consistency_checker.py": [
      "src\\data_mining\\data_mining_orchestrator.py",
      "src\\data_mining\\data_mining_orchestrator.py"
    ],
    "src\\interventions\\taxonomy.py": [
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\data_mining\\emerging_category_analyzer.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\category_validators.py",
      "src\\interventions\\search_terms.py",
      "src\\interventions\\search_terms.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\prompt_service.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\orchestration\\rotation_llm_categorization.py",
      "src\\orchestration\\rotation_llm_categorization.py"
    ],
    "src\\data_mining\\intervention_consensus_analyzer.py": [
      "src\\data_mining\\intervention_consensus_analyzer.py",
      "src\\data_mining\\intervention_consensus_analyzer.py"
    ],
    "src\\utils\\review_correlations.py": [
      "src\\data_mining\\review_correlations.py",
      "src\\data_mining\\review_correlations.py"
    ],
    "src\\llm_processing\\single_model_analyzer.py": [
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\orchestration\\rotation_llm_processor.py",
      "src\\orchestration\\rotation_llm_processor.py"
    ],
    "src\\orchestration\\rotation_llm_categorization.py": [
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py"
    ],
    "src\\experimentation\\config\\experiment_config.py": [
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py"
    ],
    "src\\experimentation\\evaluation\\system_monitor.py": [
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py"
    ],
    "src\\experimentation\\runners\\dataset_selector.py": [
      "src\\experimentation\\runners\\experiment_runner.py",
      "src\\experimentation\\runners\\experiment_runner.py"
    ],
    "src\\conditions\\category_validators.py": [
      "src\\interventions\\category_validators.py",
      "src\\interventions\\category_validators.py"
    ],
    "src\\llm_processing\\prompt_service.py": [
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\entity_operations.py",
      "src\\llm_processing\\single_model_analyzer.py",
      "src\\llm_processing\\single_model_analyzer.py"
    ],
    "src\\orchestration\\rotation_paper_collector.py": [
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\batch_medical_rotation.py"
    ],
    "src\\orchestration\\rotation_llm_processor.py": [
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\batch_medical_rotation.py"
    ],
    "src\\orchestration\\rotation_semantic_grouping_integrator.py": [
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\batch_medical_rotation.py"
    ],
    "src\\orchestration\\rotation_group_categorization.py": [
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\batch_medical_rotation.py",
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py"
    ],
    "src\\experimentation\\group_categorization\\group_categorizer.py": [
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py"
    ],
    "src\\experimentation\\group_categorization\\validation.py": [
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py"
    ],
    "src\\experimentation\\group_categorization\\condition_group_categorizer.py": [
      "src\\orchestration\\rotation_group_categorization.py",
      "src\\orchestration\\rotation_group_categorization.py"
    ],
    "src\\data_collection\\pubmed_collector.py": [
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_paper_collector.py"
    ],
    "src\\orchestration\\rotation_session_manager.py": [
      "src\\orchestration\\rotation_paper_collector.py",
      "src\\orchestration\\rotation_paper_collector.py"
    ],
    "src\\llm_processing\\batch_entity_processor.py": [
      "src\\orchestration\\rotation_semantic_grouping_integrator.py",
      "src\\orchestration\\rotation_semantic_grouping_integrator.py"
    ],
    "src\\semantic_normalization\\__init__.py": [
      "src\\orchestration\\rotation_semantic_normalizer.py",
      "src\\orchestration\\rotation_semantic_normalizer.py"
    ],
    "src\\semantic_normalization\\config.py": [
      "src\\orchestration\\rotation_semantic_normalizer.py",
      "src\\orchestration\\rotation_semantic_normalizer.py"
    ],
    "src\\semantic_normalization\\ground_truth\\generate_candidates.py": [
      "src\\semantic_normalization\\ground_truth\\__init__.py",
      "src\\semantic_normalization\\ground_truth\\__init__.py"
    ]
  },
  "file_details": {
    "scripts\\backfill_condition_categories.py": {
      "has_main": true,
      "from_imports_count": 5,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.llm_processing.llm_client",
          "items": "get_llm_client"
        },
        {
          "module": "back_end.src.conditions.taxonomy",
          "items": "ConditionType"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 4,
      "imported_by": [],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\conditions\\taxonomy.py",
        "src\\conditions\\taxonomy.py"
      ]
    },
    "scripts\\classify_conditions.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "openai",
          "items": "OpenAI"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "scripts\\migrate_add_mechanism.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "scripts\\migrate_intervention_category_nullable.py": {
      "has_main": true,
      "from_imports_count": 1,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\__init__.py": {
      "has_main": false,
      "from_imports_count": 12,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".data.config",
          "items": "config, setup_logging"
        },
        {
          "module": ".data_collection.database_manager",
          "items": "DatabaseManager, database_manager"
        },
        {
          "module": ".paper_collection.database_manager",
          "items": "DatabaseManager, database_manager"
        },
        {
          "module": ".data_collection.pubmed_collector",
          "items": "PubMedCollector"
        },
        {
          "module": ".paper_collection.pubmed_collector",
          "items": "PubMedCollector"
        },
        {
          "module": ".data_collection.paper_parser",
          "items": "PubmedParser"
        },
        {
          "module": ".paper_collection.paper_parser",
          "items": "PubmedParser"
        },
        {
          "module": ".data_collection.fulltext_retriever",
          "items": "FullTextRetriever"
        },
        {
          "module": ".paper_collection.fulltext_retriever",
          "items": "FullTextRetriever"
        },
        {
          "module": ".data.utils",
          "items": "("
        },
        {
          "module": ".data.validators",
          "items": "validation_manager"
        },
        {
          "module": ".data.error_handler",
          "items": "error_handler"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\conditions\\category_validators.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Set"
        },
        {
          "module": "back_end.src.conditions.taxonomy",
          "items": "ConditionType, condition_taxonomy"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\interventions\\category_validators.py",
        "src\\interventions\\category_validators.py"
      ],
      "imports": [
        "src\\conditions\\taxonomy.py",
        "src\\conditions\\taxonomy.py"
      ]
    },
    "src\\conditions\\search_terms.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict"
        },
        {
          "module": "back_end.src.conditions.taxonomy",
          "items": "ConditionType"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\conditions\\taxonomy.py",
        "src\\conditions\\taxonomy.py"
      ]
    },
    "src\\conditions\\taxonomy.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "dataclasses",
          "items": "dataclass, field"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Set, Any"
        },
        {
          "module": "enum",
          "items": "Enum"
        }
      ],
      "is_imported": true,
      "imported_by_count": 8,
      "imports_count": 0,
      "imported_by": [
        "scripts\\backfill_condition_categories.py",
        "scripts\\backfill_condition_categories.py",
        "src\\conditions\\category_validators.py",
        "src\\conditions\\category_validators.py",
        "src\\conditions\\search_terms.py",
        "src\\conditions\\search_terms.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py"
      ],
      "imports": []
    },
    "src\\data\\api_clients.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        },
        {
          "module": "openai",
          "items": "OpenAI"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.error_handler",
          "items": "handle_api_errors, handle_llm_errors"
        }
      ],
      "is_imported": true,
      "imported_by_count": 12,
      "imports_count": 4,
      "imported_by": [
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\utils\\reextract_mechanisms.py",
        "src\\utils\\reextract_mechanisms.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\error_handler.py",
        "src\\data\\error_handler.py"
      ]
    },
    "src\\data\\config.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Optional, Dict, Any, List"
        },
        {
          "module": "dotenv",
          "items": "load_dotenv"
        }
      ],
      "is_imported": true,
      "imported_by_count": 88,
      "imports_count": 0,
      "imported_by": [
        "scripts\\migrate_add_mechanism.py",
        "scripts\\migrate_add_mechanism.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data\\error_handler.py",
        "src\\data\\error_handler.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\data\\validators.py",
        "src\\data\\validators.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\treatment_recommendation_engine.py",
        "src\\data_mining\\treatment_recommendation_engine.py",
        "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
        "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
        "src\\experimentation\\group_categorization\\experiment_runner.py",
        "src\\experimentation\\group_categorization\\experiment_runner.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\validation.py",
        "src\\experimentation\\group_categorization\\validation.py",
        "src\\experimentation\\runners\\dataset_selector.py",
        "src\\experimentation\\runners\\dataset_selector.py",
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\llm_processing\\export_to_json.py",
        "src\\llm_processing\\export_to_json.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\migrations\\add_semantic_normalization_tables.py",
        "src\\migrations\\add_semantic_normalization_tables.py",
        "src\\migrations\\create_interventions_view_option_b.py",
        "src\\migrations\\create_interventions_view_option_b.py",
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_semantic_normalizer.py",
        "src\\orchestration\\rotation_semantic_normalizer.py",
        "src\\orchestration\\rotation_session_manager.py",
        "src\\orchestration\\rotation_session_manager.py",
        "src\\utils\\analyze_reviews.py",
        "src\\utils\\analyze_reviews.py",
        "src\\utils\\batch_file_operations.py",
        "src\\utils\\batch_file_operations.py",
        "src\\utils\\reextract_mechanisms.py",
        "src\\utils\\reextract_mechanisms.py",
        "src\\utils\\review_correlations.py",
        "src\\utils\\review_correlations.py",
        "src\\utils\\run_correlation_extraction.py",
        "src\\utils\\run_correlation_extraction.py"
      ],
      "imports": []
    },
    "src\\data\\error_handler.py": {
      "has_main": false,
      "from_imports_count": 5,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Any, Callable, Dict, List, Optional, Tuple, Type, Union"
        },
        {
          "module": "functools",
          "items": "wraps  #?Preserve original function name and docstrings when using decorators"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "enum",
          "items": "Enum #? tool for creating enumerations (named constants)"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 2,
      "imported_by": [
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data\\repositories.py": {
      "has_main": false,
      "from_imports_count": 5,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any"
        },
        {
          "module": "abc",
          "items": "ABC, abstractmethod"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.llm_processing.enhanced_database_manager",
          "items": "NormalizedDatabaseManager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 8,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_llm_processor.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\data\\utils.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Any, Callable, Dict, List, Optional, TypeVar, Union"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": ".config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 14,
      "imports_count": 2,
      "imported_by": [
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\utils\\reextract_mechanisms.py",
        "src\\utils\\reextract_mechanisms.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data\\validators.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Any, Dict, List, Optional, Set, Union"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "enum",
          "items": "Enum"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 6,
      "imports_count": 2,
      "imported_by": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\paper_parser.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\category_validators.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data\\__init__.py": {
      "has_main": false,
      "from_imports_count": 6,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".config",
          "items": "config, setup_logging, LLMConfig"
        },
        {
          "module": ".utils",
          "items": "("
        },
        {
          "module": ".api_clients",
          "items": "("
        },
        {
          "module": ".repositories",
          "items": "repository_manager"
        },
        {
          "module": ".validators",
          "items": "validation_manager"
        },
        {
          "module": ".error_handler",
          "items": "error_handler"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_collection\\database_manager.py": {
      "has_main": false,
      "from_imports_count": 14,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "contextlib",
          "items": "contextmanager"
        },
        {
          "module": "typing",
          "items": "List, Dict, Optional, Any"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.validators",
          "items": "validation_manager"
        },
        {
          "module": "back_end.src.interventions.category_validators",
          "items": "category_validator"
        },
        {
          "module": "..llm_processing.batch_entity_processor",
          "items": "BatchEntityProcessor as EntityNormalizer"
        },
        {
          "module": "back_end.src.utils.batch_file_operations",
          "items": "cleanup_xml_files_for_papers"
        },
        {
          "module": "back_end.src.utils.batch_file_operations",
          "items": "flush_pending_operations"
        },
        {
          "module": "..interventions.taxonomy",
          "items": "intervention_taxonomy"
        },
        {
          "module": "..interventions.search_terms",
          "items": "search_terms"
        },
        {
          "module": "..conditions.taxonomy",
          "items": "condition_taxonomy"
        },
        {
          "module": "..conditions.search_terms",
          "items": "search_terms as condition_search_terms"
        }
      ],
      "is_imported": true,
      "imported_by_count": 38,
      "imports_count": 10,
      "imported_by": [
        "scripts\\backfill_condition_categories.py",
        "scripts\\backfill_condition_categories.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_mining\\correlation_consistency_checker.py",
        "src\\data_mining\\correlation_consistency_checker.py",
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\experimentation\\runners\\dataset_selector.py",
        "src\\experimentation\\runners\\dataset_selector.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\llm_processing\\export_to_json.py",
        "src\\llm_processing\\export_to_json.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\utils\\batch_process_summary.py",
        "src\\utils\\batch_process_summary.py",
        "src\\utils\\review_correlations.py",
        "src\\utils\\review_correlations.py",
        "src\\utils\\run_correlation_extraction.py",
        "src\\utils\\run_correlation_extraction.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\validators.py",
        "src\\data\\validators.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\category_validators.py",
        "src\\utils\\batch_file_operations.py",
        "src\\utils\\batch_file_operations.py",
        "src\\utils\\batch_file_operations.py",
        "src\\utils\\batch_file_operations.py"
      ]
    },
    "src\\data_collection\\data_mining_repository.py": {
      "has_main": false,
      "from_imports_count": 6,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple, Union"
        },
        {
          "module": "datetime",
          "items": "datetime, date"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, asdict"
        },
        {
          "module": "contextlib",
          "items": "contextmanager"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 8,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\treatment_recommendation_engine.py",
        "src\\data_mining\\treatment_recommendation_engine.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\data_collection\\fulltext_retriever.py": {
      "has_main": false,
      "from_imports_count": 6,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, Optional, List, Any"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_pmc_client, get_unpaywall_client"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "batch_process"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 8,
      "imported_by": [
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py"
      ]
    },
    "src\\data_collection\\paper_parser.py": {
      "has_main": false,
      "from_imports_count": 6,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Optional"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "batch_process"
        },
        {
          "module": "back_end.src.data.validators",
          "items": "validation_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 8,
      "imported_by": [
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\data\\validators.py",
        "src\\data\\validators.py"
      ]
    },
    "src\\data_collection\\pubmed_collector.py": {
      "has_main": false,
      "from_imports_count": 11,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Any, Optional"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_pubmed_client"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data_collection.paper_parser",
          "items": "PubmedParser"
        },
        {
          "module": "back_end.src.data_collection.fulltext_retriever",
          "items": "FullTextRetriever"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "batch_process"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.interventions.search_terms",
          "items": "search_terms"
        },
        {
          "module": "back_end.src.data_collection.semantic_scholar_enrichment",
          "items": "SemanticScholarEnricher"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 16,
      "imported_by": [
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_paper_collector.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\paper_parser.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data_collection\\fulltext_retriever.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\interventions\\search_terms.py",
        "src\\interventions\\search_terms.py",
        "src\\data_collection\\semantic_scholar_enrichment.py",
        "src\\data_collection\\semantic_scholar_enrichment.py"
      ]
    },
    "src\\data_collection\\semantic_scholar_enrichment.py": {
      "has_main": false,
      "from_imports_count": 6,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_semantic_scholar_client"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 6,
      "imported_by": [
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\data_collection\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\bayesian_scorer.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, Union, Tuple, Optional"
        },
        {
          "module": "scipy",
          "items": "stats"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": ".scoring_utils",
          "items": "EffectivenessScorer, ConfidenceCalculator, ScoringResult, StatisticalHelpers"
        },
        {
          "module": "back_end.src.data_collection.data_mining_repository",
          "items": "DataMiningRepository, BayesianScore"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging, config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": [
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data_mining\\biological_patterns.py": {
      "has_main": false,
      "from_imports_count": 8,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "sklearn.decomposition",
          "items": "NMF"
        },
        {
          "module": "sklearn.cluster",
          "items": "KMeans, AgglomerativeClustering"
        },
        {
          "module": "sklearn.preprocessing",
          "items": "StandardScaler"
        },
        {
          "module": "sklearn.metrics",
          "items": "silhouette_score, calinski_harabasz_score"
        },
        {
          "module": "sklearn.feature_extraction.text",
          "items": "TfidfVectorizer"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": []
    },
    "src\\data_mining\\condition_similarity_mapping.py": {
      "has_main": false,
      "from_imports_count": 10,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "sklearn.cluster",
          "items": "AgglomerativeClustering, KMeans"
        },
        {
          "module": "sklearn.metrics.pairwise",
          "items": "cosine_similarity"
        },
        {
          "module": "scipy.cluster.hierarchy",
          "items": "dendrogram, linkage, fcluster"
        },
        {
          "module": "scipy.spatial.distance",
          "items": "pdist, squareform"
        },
        {
          "module": ".similarity_utils",
          "items": "SimilarityCalculator, ConditionSimilarityMetrics"
        },
        {
          "module": ".medical_knowledge",
          "items": "MedicalKnowledge"
        },
        {
          "module": ".scoring_utils",
          "items": "ConfidenceCalculator"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": []
    },
    "src\\data_mining\\correlation_consistency_checker.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Set"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\data_mining\\data_mining_orchestrator.py": {
      "has_main": true,
      "from_imports_count": 18,
      "direct_imports_count": 7,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime, timedelta"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, asdict"
        },
        {
          "module": "concurrent.futures",
          "items": "ThreadPoolExecutor, as_completed"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.repositories",
          "items": "repository_manager"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data_mining.bayesian_scorer",
          "items": "BayesianEvidenceScorer"
        },
        {
          "module": "back_end.src.data_mining.medical_knowledge_graph",
          "items": "MedicalKnowledgeGraph"
        },
        {
          "module": "back_end.src.data_mining.treatment_recommendation_engine",
          "items": "TreatmentRecommendationEngine"
        },
        {
          "module": "back_end.src.data_mining.research_gaps",
          "items": "ResearchGapIdentification"
        },
        {
          "module": "back_end.src.data_mining.innovation_tracking_system",
          "items": "InnovationTrackingSystem"
        },
        {
          "module": "back_end.src.data_mining.biological_patterns",
          "items": "BiologicalPatternDiscovery"
        },
        {
          "module": "back_end.src.data_mining.condition_similarity_mapping",
          "items": "ConditionSimilarityMapper"
        },
        {
          "module": "back_end.src.data_mining.power_combinations",
          "items": "PowerCombinationAnalysis"
        },
        {
          "module": "back_end.src.data_mining.failed_interventions",
          "items": "FailedInterventionCatalog"
        },
        {
          "module": "back_end.src.data_mining.correlation_consistency_checker",
          "items": "CorrelationConsistencyChecker"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 26,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\bayesian_scorer.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\medical_knowledge_graph.py",
        "src\\data_mining\\treatment_recommendation_engine.py",
        "src\\data_mining\\treatment_recommendation_engine.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\research_gaps.py",
        "src\\data_mining\\innovation_tracking_system.py",
        "src\\data_mining\\innovation_tracking_system.py",
        "src\\data_mining\\biological_patterns.py",
        "src\\data_mining\\biological_patterns.py",
        "src\\data_mining\\condition_similarity_mapping.py",
        "src\\data_mining\\condition_similarity_mapping.py",
        "src\\data_mining\\power_combinations.py",
        "src\\data_mining\\power_combinations.py",
        "src\\data_mining\\failed_interventions.py",
        "src\\data_mining\\failed_interventions.py",
        "src\\data_mining\\correlation_consistency_checker.py",
        "src\\data_mining\\correlation_consistency_checker.py"
      ]
    },
    "src\\data_mining\\emerging_category_analyzer.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Set, Tuple, Any"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "Counter, defaultdict"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data.repositories",
          "items": "repository_manager"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType, intervention_taxonomy"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 6,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py",
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py"
      ]
    },
    "src\\data_mining\\failed_interventions.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": []
    },
    "src\\data_mining\\fundamental_functions.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\graph_utils.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Set, Tuple, Optional, Any"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\innovation_tracking_system.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "datetime",
          "items": "datetime, timedelta"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": []
    },
    "src\\data_mining\\intervention_consensus_analyzer.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "back_end.src.data_mining.intervention_consensus_analyzer",
          "items": "InterventionConsensusAnalyzer"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\data_mining\\intervention_consensus_analyzer.py",
        "src\\data_mining\\intervention_consensus_analyzer.py"
      ],
      "imports": [
        "src\\data_mining\\intervention_consensus_analyzer.py",
        "src\\data_mining\\intervention_consensus_analyzer.py"
      ]
    },
    "src\\data_mining\\medical_knowledge.py": {
      "has_main": false,
      "from_imports_count": 1,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Set, Tuple, Optional"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\medical_knowledge_graph.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Set, Tuple, Optional, Any, Union"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, field"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data_collection.data_mining_repository",
          "items": "("
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": [
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data_mining\\power_combinations.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "itertools",
          "items": "combinations"
        },
        {
          "module": ".medical_knowledge",
          "items": "MedicalKnowledge"
        },
        {
          "module": ".scoring_utils",
          "items": "EffectivenessScorer, StatisticalHelpers"
        },
        {
          "module": ".graph_utils",
          "items": "EdgeAggregation"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": []
    },
    "src\\data_mining\\research_gaps.py": {
      "has_main": false,
      "from_imports_count": 12,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "sklearn.metrics.pairwise",
          "items": "cosine_similarity"
        },
        {
          "module": "sklearn.feature_extraction.text",
          "items": "TfidfVectorizer"
        },
        {
          "module": ".medical_knowledge",
          "items": "MedicalKnowledge"
        },
        {
          "module": ".similarity_utils",
          "items": "SimilarityCalculator, ConditionSimilarityMetrics"
        },
        {
          "module": ".scoring_utils",
          "items": "EffectivenessScorer, ConfidenceCalculator"
        },
        {
          "module": "back_end.src.data_collection.data_mining_repository",
          "items": "("
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": [
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\data_mining\\review_correlations.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.utils.review_correlations",
          "items": "main"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\utils\\review_correlations.py",
        "src\\utils\\review_correlations.py"
      ]
    },
    "src\\data_mining\\scoring_utils.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Set"
        },
        {
          "module": "scipy",
          "items": "stats"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\similarity_utils.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Set, Optional"
        },
        {
          "module": "sklearn.metrics.pairwise",
          "items": "cosine_similarity as sklearn_cosine"
        },
        {
          "module": "scipy.stats",
          "items": "entropy"
        },
        {
          "module": "scipy.spatial.distance",
          "items": "jaccard"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\data_mining\\treatment_recommendation_engine.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Any, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data_collection.data_mining_repository",
          "items": "("
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging, config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\data_mining_orchestrator.py",
        "src\\data_mining\\data_mining_orchestrator.py"
      ],
      "imports": [
        "src\\data_collection\\data_mining_repository.py",
        "src\\data_collection\\data_mining_repository.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\experimentation\\analyze_interventions.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\check_progress.py": {
      "has_main": false,
      "from_imports_count": 1,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\show_interventions.py": {
      "has_main": false,
      "from_imports_count": 1,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\analysis\\results_analyzer.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\analysis\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\config\\experiment_config.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "dataclasses",
          "items": "dataclass, field"
        },
        {
          "module": "typing",
          "items": "List, Optional"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 0,
      "imported_by": [
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py"
      ],
      "imports": []
    },
    "src\\experimentation\\config\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\evaluation\\system_monitor.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, Optional"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py"
      ],
      "imports": []
    },
    "src\\experimentation\\evaluation\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\group_categorization\\condition_group_categorizer.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "openai",
          "items": "OpenAI"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\experimentation\\group_categorization\\experiment_runner.py": {
      "has_main": true,
      "from_imports_count": 6,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        },
        {
          "module": ".group_categorizer",
          "items": "GroupBasedCategorizer"
        },
        {
          "module": ".validation",
          "items": "validate_all"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\experimentation\\group_categorization\\group_categorizer.py": {
      "has_main": true,
      "from_imports_count": 5,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "openai",
          "items": "OpenAI"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\experimentation\\group_categorization\\validation.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\experimentation\\group_categorization\\__init__.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".group_categorizer",
          "items": "GroupBasedCategorizer"
        },
        {
          "module": ".validation",
          "items": "validate_category_coverage, validate_group_purity, compare_with_existing"
        },
        {
          "module": ".experiment_runner",
          "items": "run_experiment"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\experimentation\\runners\\dataset_selector.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\experimentation\\runners\\experiment_runner.py": {
      "has_main": true,
      "from_imports_count": 10,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Any"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.llm_processing.single_model_analyzer",
          "items": "SingleModelAnalyzer"
        },
        {
          "module": "back_end.src.orchestration.rotation_llm_categorization",
          "items": "RotationLLMCategorizer"
        },
        {
          "module": "back_end.src.experimentation.config.experiment_config",
          "items": "ExperimentConfig"
        },
        {
          "module": "back_end.src.experimentation.evaluation.system_monitor",
          "items": "SystemMonitor"
        },
        {
          "module": "back_end.src.experimentation.config.experiment_config",
          "items": "EXPERIMENTS"
        },
        {
          "module": "back_end.src.experimentation.runners.dataset_selector",
          "items": "DatasetSelector"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 14,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\experimentation\\config\\experiment_config.py",
        "src\\experimentation\\config\\experiment_config.py",
        "src\\experimentation\\evaluation\\system_monitor.py",
        "src\\experimentation\\evaluation\\system_monitor.py",
        "src\\experimentation\\config\\experiment_config.py",
        "src\\experimentation\\config\\experiment_config.py",
        "src\\experimentation\\runners\\dataset_selector.py",
        "src\\experimentation\\runners\\dataset_selector.py"
      ]
    },
    "src\\experimentation\\runners\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\interventions\\category_validators.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Set"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType, intervention_taxonomy"
        },
        {
          "module": "back_end.src.data.validators",
          "items": "validation_manager, ValidationResult"
        },
        {
          "module": "back_end.src.conditions.category_validators",
          "items": "condition_validator"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 6,
      "imported_by": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py"
      ],
      "imports": [
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py",
        "src\\data\\validators.py",
        "src\\data\\validators.py",
        "src\\conditions\\category_validators.py",
        "src\\conditions\\category_validators.py"
      ]
    },
    "src\\interventions\\search_terms.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Set"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py"
      ],
      "imports": [
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py"
      ]
    },
    "src\\interventions\\taxonomy.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "dataclasses",
          "items": "dataclass, field"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Set, Any"
        },
        {
          "module": "enum",
          "items": "Enum"
        }
      ],
      "is_imported": true,
      "imported_by_count": 12,
      "imports_count": 0,
      "imported_by": [
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\data_mining\\emerging_category_analyzer.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\search_terms.py",
        "src\\interventions\\search_terms.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\orchestration\\rotation_llm_categorization.py",
        "src\\orchestration\\rotation_llm_categorization.py"
      ],
      "imports": []
    },
    "src\\interventions\\__init__.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".taxonomy",
          "items": "InterventionTaxonomy, InterventionCategory"
        },
        {
          "module": ".category_validators",
          "items": "category_validator"
        },
        {
          "module": ".search_terms",
          "items": "InterventionSearchTerms"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\llm_processing\\batch_entity_processor.py": {
      "has_main": true,
      "from_imports_count": 7,
      "direct_imports_count": 9,
      "from_imports": [
        {
          "module": "typing",
          "items": "Optional, List, Dict, Any, Union, Callable, Tuple, Set"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": ".entity_utils",
          "items": "("
        },
        {
          "module": ".entity_operations",
          "items": "EntityRepository, LLMProcessor, SemanticGrouper"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py"
      ],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\llm_processing\\entity_operations.py": {
      "has_main": false,
      "from_imports_count": 7,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "typing",
          "items": "Optional, List, Dict, Any, Union, Tuple"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": ".entity_utils",
          "items": "("
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_llm_client"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "parse_json_safely"
        },
        {
          "module": "back_end.src.llm_processing.prompt_service",
          "items": "InterventionPromptService"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 6,
      "imported_by": [],
      "imports": [
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\prompt_service.py"
      ]
    },
    "src\\llm_processing\\entity_utils.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "enum",
          "items": "Enum"
        },
        {
          "module": "typing",
          "items": "Optional, List, Dict, Any, Union, Callable, Tuple, Set"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\llm_processing\\export_to_json.py": {
      "has_main": true,
      "from_imports_count": 7,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Any, Optional"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": ".batch_entity_processor",
          "items": "BatchEntityProcessor as EntityNormalizer"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 4,
      "imported_by": [],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\llm_processing\\prompt_service.py": {
      "has_main": false,
      "from_imports_count": 5,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "setup_logging"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "read_fulltext_content"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType, intervention_taxonomy"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 6,
      "imported_by": [
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\entity_operations.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py"
      ]
    },
    "src\\llm_processing\\single_model_analyzer.py": {
      "has_main": false,
      "from_imports_count": 12,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "tqdm",
          "items": "tqdm"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_llm_client"
        },
        {
          "module": "back_end.src.data.repositories",
          "items": "repository_manager"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "(parse_json_safely, batch_process)"
        },
        {
          "module": "back_end.src.data.error_handler",
          "items": "handle_llm_errors"
        },
        {
          "module": "back_end.src.interventions.category_validators",
          "items": "category_validator, CategoryValidationError"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType"
        },
        {
          "module": "back_end.src.llm_processing.prompt_service",
          "items": "prompt_service"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 16,
      "imported_by": [
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_llm_processor.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py",
        "src\\data\\error_handler.py",
        "src\\data\\error_handler.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\category_validators.py",
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py",
        "src\\llm_processing\\prompt_service.py",
        "src\\llm_processing\\prompt_service.py"
      ]
    },
    "src\\llm_processing\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\migrations\\add_semantic_normalization_tables.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        },
        {
          "module": "data.config",
          "items": "config"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\migrations\\create_interventions_view_option_b.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        },
        {
          "module": "data.config",
          "items": "config"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\orchestration\\batch_medical_rotation.py": {
      "has_main": true,
      "from_imports_count": 17,
      "direct_imports_count": 8,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime, timedelta"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "enum",
          "items": "Enum"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, field"
        },
        {
          "module": "..data.config",
          "items": "config, setup_logging"
        },
        {
          "module": ".rotation_paper_collector",
          "items": "RotationPaperCollector, BatchCollectionResult"
        },
        {
          "module": ".rotation_llm_processor",
          "items": "RotationLLMProcessor"
        },
        {
          "module": ".rotation_semantic_grouping_integrator",
          "items": "RotationSemanticGroupingIntegrator"
        },
        {
          "module": ".rotation_group_categorization",
          "items": "RotationGroupCategorizer"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.orchestration.rotation_paper_collector",
          "items": "RotationPaperCollector, BatchCollectionResult"
        },
        {
          "module": "back_end.src.orchestration.rotation_llm_processor",
          "items": "RotationLLMProcessor"
        },
        {
          "module": "back_end.src.orchestration.rotation_semantic_grouping_integrator",
          "items": "RotationSemanticGroupingIntegrator"
        },
        {
          "module": "back_end.src.orchestration.rotation_group_categorization",
          "items": "RotationGroupCategorizer"
        },
        {
          "module": ".rotation_semantic_normalizer",
          "items": "SemanticNormalizationOrchestrator"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 10,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_llm_processor.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_semantic_grouping_integrator.py",
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py"
      ]
    },
    "src\\orchestration\\rotation_group_categorization.py": {
      "has_main": true,
      "from_imports_count": 8,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "back_end.src.orchestration.rotation_group_categorization",
          "items": "RotationGroupCategorizer"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, Optional"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.experimentation.group_categorization.group_categorizer",
          "items": "GroupBasedCategorizer"
        },
        {
          "module": "back_end.src.experimentation.group_categorization.validation",
          "items": "validate_all"
        },
        {
          "module": "back_end.src.experimentation.group_categorization.condition_group_categorizer",
          "items": "ConditionGroupBasedCategorizer"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 10,
      "imported_by": [
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py"
      ],
      "imports": [
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\orchestration\\rotation_group_categorization.py",
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\group_categorizer.py",
        "src\\experimentation\\group_categorization\\validation.py",
        "src\\experimentation\\group_categorization\\validation.py",
        "src\\experimentation\\group_categorization\\condition_group_categorizer.py",
        "src\\experimentation\\group_categorization\\condition_group_categorizer.py"
      ]
    },
    "src\\orchestration\\rotation_llm_categorization.py": {
      "has_main": true,
      "from_imports_count": 6,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Optional, Tuple"
        },
        {
          "module": "openai",
          "items": "OpenAI"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.interventions.taxonomy",
          "items": "InterventionType"
        },
        {
          "module": "back_end.src.conditions.taxonomy",
          "items": "ConditionType"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 8,
      "imported_by": [
        "src\\experimentation\\runners\\experiment_runner.py",
        "src\\experimentation\\runners\\experiment_runner.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\interventions\\taxonomy.py",
        "src\\interventions\\taxonomy.py",
        "src\\conditions\\taxonomy.py",
        "src\\conditions\\taxonomy.py"
      ]
    },
    "src\\orchestration\\rotation_llm_processor.py": {
      "has_main": true,
      "from_imports_count": 14,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "tqdm",
          "items": "tqdm"
        },
        {
          "module": "..data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "..data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "..llm_processing.single_model_analyzer",
          "items": "SingleModelAnalyzer"
        },
        {
          "module": "..data.repositories",
          "items": "repository_manager"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.llm_processing.single_model_analyzer",
          "items": "SingleModelAnalyzer"
        },
        {
          "module": "back_end.src.data.repositories",
          "items": "repository_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 8,
      "imported_by": [
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\batch_medical_rotation.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\llm_processing\\single_model_analyzer.py",
        "src\\data\\repositories.py",
        "src\\data\\repositories.py"
      ]
    },
    "src\\orchestration\\rotation_paper_collector.py": {
      "has_main": true,
      "from_imports_count": 14,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "tqdm",
          "items": "tqdm"
        },
        {
          "module": "..data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "..data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "..data_collection.pubmed_collector",
          "items": "PubMedCollector"
        },
        {
          "module": ".rotation_session_manager",
          "items": "("
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data_collection.pubmed_collector",
          "items": "PubMedCollector"
        },
        {
          "module": "back_end.src.orchestration.rotation_session_manager",
          "items": "("
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 8,
      "imported_by": [
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\batch_medical_rotation.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\data_collection\\pubmed_collector.py",
        "src\\orchestration\\rotation_session_manager.py",
        "src\\orchestration\\rotation_session_manager.py"
      ]
    },
    "src\\orchestration\\rotation_semantic_grouping_integrator.py": {
      "has_main": true,
      "from_imports_count": 10,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "..data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "..llm_processing.batch_entity_processor",
          "items": "create_batch_processor"
        },
        {
          "module": "..data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.llm_processing.batch_entity_processor",
          "items": "create_batch_processor"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 6,
      "imported_by": [
        "src\\orchestration\\batch_medical_rotation.py",
        "src\\orchestration\\batch_medical_rotation.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\llm_processing\\batch_entity_processor.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\orchestration\\rotation_semantic_normalizer.py": {
      "has_main": true,
      "from_imports_count": 7,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict, Optional, Set"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        },
        {
          "module": "back_end.src.semantic_normalization",
          "items": "SemanticNormalizer"
        },
        {
          "module": "back_end.src.semantic_normalization.config",
          "items": "("
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 6,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\semantic_normalization\\__init__.py",
        "src\\semantic_normalization\\__init__.py",
        "src\\semantic_normalization\\config.py",
        "src\\semantic_normalization\\config.py"
      ]
    },
    "src\\orchestration\\rotation_session_manager.py": {
      "has_main": false,
      "from_imports_count": 8,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime, timedelta"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Any, Tuple"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, asdict"
        },
        {
          "module": "enum",
          "items": "Enum"
        },
        {
          "module": "..data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 2,
      "imported_by": [
        "src\\orchestration\\rotation_paper_collector.py",
        "src\\orchestration\\rotation_paper_collector.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\orchestration\\__init__.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\cluster_reviewer.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "collections",
          "items": "Counter"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\config.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, Any"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\orchestration\\rotation_semantic_normalizer.py",
        "src\\orchestration\\rotation_semantic_normalizer.py"
      ],
      "imports": []
    },
    "src\\semantic_normalization\\embedding_engine.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 5,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict, Tuple, Optional"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\evaluator.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "embedding_engine",
          "items": "EmbeddingEngine"
        },
        {
          "module": "llm_classifier",
          "items": "LLMClassifier"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\experiment_logger.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\hierarchy_manager.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\llm_classifier.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 6,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, Optional, Tuple"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": ".prompts",
          "items": "("
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\normalizer.py": {
      "has_main": true,
      "from_imports_count": 10,
      "direct_imports_count": 6,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Optional"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "tqdm",
          "items": "tqdm"
        },
        {
          "module": ".embedding_engine",
          "items": "EmbeddingEngine"
        },
        {
          "module": ".llm_classifier",
          "items": "LLMClassifier"
        },
        {
          "module": ".hierarchy_manager",
          "items": "HierarchyManager, initialize_database_schema"
        },
        {
          "module": ".config",
          "items": "CACHE_DIR, RESULTS_DIR"
        },
        {
          "module": ".config",
          "items": "CACHE_DIR"
        },
        {
          "module": ".config",
          "items": "CACHE_DIR"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\prompts.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\semantic_normalizer.py": {
      "has_main": false,
      "from_imports_count": 3,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Optional"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": ".normalizer",
          "items": "MainNormalizer"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\test_runner.py": {
      "has_main": true,
      "from_imports_count": 7,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "List, Dict, Optional"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "embedding_engine",
          "items": "EmbeddingEngine"
        },
        {
          "module": "llm_classifier",
          "items": "LLMClassifier"
        },
        {
          "module": "hierarchy_manager",
          "items": "HierarchyManager"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\__init__.py": {
      "has_main": false,
      "from_imports_count": 5,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".embedding_engine",
          "items": "EmbeddingEngine"
        },
        {
          "module": ".llm_classifier",
          "items": "LLMClassifier"
        },
        {
          "module": ".hierarchy_manager",
          "items": "HierarchyManager"
        },
        {
          "module": ".normalizer",
          "items": "MainNormalizer"
        },
        {
          "module": ".semantic_normalizer",
          "items": "SemanticNormalizer"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\orchestration\\rotation_semantic_normalizer.py",
        "src\\orchestration\\rotation_semantic_normalizer.py"
      ],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\data_exporter.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict, Any"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\evaluator.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "typing",
          "items": "Dict, List, Tuple"
        },
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        },
        {
          "module": "embedding_engine",
          "items": "EmbeddingEngine"
        },
        {
          "module": "llm_classifier",
          "items": "LLMClassifier"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\generate_candidates.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pair_generator",
          "items": "SmartPairGenerator"
        },
        {
          "module": "data_exporter",
          "items": "InterventionDataExporter"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 0,
      "imported_by": [
        "src\\semantic_normalization\\ground_truth\\__init__.py",
        "src\\semantic_normalization\\ground_truth\\__init__.py"
      ],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\labeling_interface.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\label_in_batches.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional"
        },
        {
          "module": "labeling_interface",
          "items": "HierarchicalLabelingInterface"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\pair_generator.py": {
      "has_main": true,
      "from_imports_count": 8,
      "direct_imports_count": 4,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Dict, Tuple, Set, Optional"
        },
        {
          "module": "itertools",
          "items": "combinations"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "rapidfuzz",
          "items": "fuzz"
        },
        {
          "module": "fuzzywuzzy",
          "items": "fuzz"
        },
        {
          "module": ".data_exporter",
          "items": "InterventionDataExporter"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\prompts.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\remove_duplicate_labels.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\semantic_normalization\\ground_truth\\__init__.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": "back_end.src.semantic_normalization.ground_truth.generate_candidates",
          "items": "main"
        },
        {
          "module": ".labeling_interface",
          "items": "HierarchicalLabelingInterface"
        },
        {
          "module": ".pair_generator",
          "items": "SmartPairGenerator"
        },
        {
          "module": ".data_exporter",
          "items": "InterventionDataExporter"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\semantic_normalization\\ground_truth\\generate_candidates.py",
        "src\\semantic_normalization\\ground_truth\\generate_candidates.py"
      ]
    },
    "src\\utils\\analyze_mapping_suggestions.py": {
      "has_main": true,
      "from_imports_count": 1,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "collections",
          "items": "defaultdict, Counter"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\analyze_reviews.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List"
        },
        {
          "module": "collections",
          "items": "Counter"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\utils\\batch_file_operations.py": {
      "has_main": false,
      "from_imports_count": 4,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "List, Set"
        },
        {
          "module": "threading",
          "items": "Lock"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        }
      ],
      "is_imported": true,
      "imported_by_count": 4,
      "imports_count": 2,
      "imported_by": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\utils\\batch_process_summary.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "..llm_processing.batch_entity_processor",
          "items": "BatchEntityProcessor as EntityNormalizer"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 2,
      "imported_by": [],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py"
      ]
    },
    "src\\utils\\batch_process_unmapped_terms.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 6,
      "from_imports": [
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Tuple, Optional, Set"
        },
        {
          "module": "collections",
          "items": "defaultdict"
        },
        {
          "module": "..llm_processing.batch_entity_processor",
          "items": "BatchEntityProcessor as EntityNormalizer"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\cleanup_old_interventions.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "List, Tuple"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\create_manual_mappings.py": {
      "has_main": true,
      "from_imports_count": 1,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "..llm_processing.batch_entity_processor",
          "items": "BatchEntityProcessor as EntityNormalizer"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\drop_legacy_tables.py": {
      "has_main": true,
      "from_imports_count": 2,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\export_frontend_data.py": {
      "has_main": true,
      "from_imports_count": 3,
      "direct_imports_count": 2,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "typing",
          "items": "Dict, List, Any"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\imports.py": {
      "has_main": false,
      "from_imports_count": 2,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "typing",
          "items": "Optional, Any, Dict, List"
        },
        {
          "module": "pathlib",
          "items": "Path"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\integration_success_summary.py": {
      "has_main": false,
      "from_imports_count": 0,
      "direct_imports_count": 0,
      "from_imports": [],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    },
    "src\\utils\\reextract_mechanisms.py": {
      "has_main": true,
      "from_imports_count": 7,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "dataclasses",
          "items": "dataclass"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        },
        {
          "module": "back_end.src.data.api_clients",
          "items": "get_llm_client"
        },
        {
          "module": "back_end.src.data.utils",
          "items": "parse_json_safely"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 6,
      "imported_by": [],
      "imports": [
        "src\\data\\config.py",
        "src\\data\\config.py",
        "src\\data\\api_clients.py",
        "src\\data\\api_clients.py",
        "src\\data\\utils.py",
        "src\\data\\utils.py"
      ]
    },
    "src\\utils\\review_correlations.py": {
      "has_main": true,
      "from_imports_count": 6,
      "direct_imports_count": 3,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "typing",
          "items": "Dict, List, Optional, Tuple"
        },
        {
          "module": "dataclasses",
          "items": "dataclass, asdict"
        },
        {
          "module": "datetime",
          "items": "datetime"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config"
        }
      ],
      "is_imported": true,
      "imported_by_count": 2,
      "imports_count": 4,
      "imported_by": [
        "src\\data_mining\\review_correlations.py",
        "src\\data_mining\\review_correlations.py"
      ],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\utils\\run_correlation_extraction.py": {
      "has_main": true,
      "from_imports_count": 4,
      "direct_imports_count": 1,
      "from_imports": [
        {
          "module": "pathlib",
          "items": "Path"
        },
        {
          "module": "back_end.src.data_collection.database_manager",
          "items": "database_manager"
        },
        {
          "module": "back_end.src.llm_processing.dual_model_analyzer",
          "items": "DualModelAnalyzer"
        },
        {
          "module": "back_end.src.data.config",
          "items": "config, setup_logging"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 4,
      "imported_by": [],
      "imports": [
        "src\\data_collection\\database_manager.py",
        "src\\data_collection\\database_manager.py",
        "src\\data\\config.py",
        "src\\data\\config.py"
      ]
    },
    "src\\utils\\__init__.py": {
      "has_main": false,
      "from_imports_count": 1,
      "direct_imports_count": 0,
      "from_imports": [
        {
          "module": ".imports",
          "items": "ImportManager, import_manager, import_optional_dependency"
        }
      ],
      "is_imported": false,
      "imported_by_count": 0,
      "imports_count": 0,
      "imported_by": [],
      "imports": []
    }
  }
}